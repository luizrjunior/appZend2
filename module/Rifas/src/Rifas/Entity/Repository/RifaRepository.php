<?php

namespace Rifas\Entity\Repository;

use Rifas\Entity\RifaEntity;
use Doctrine\ORM\EntityRepository;
use DoctrineORMModule\Paginator\Adapter\DoctrinePaginator as DoctrineAdapter;
use Doctrine\ORM\Tools\Pagination\Paginator as ORMPaginator;
use Zend\Paginator\Paginator;
use Zend\Stdlib\Hydrator;

/**
 * RifaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RifaRepository extends EntityRepository {

    public function inserirRifas($param = array()) {
        $entity = new RifaEntity($param);

        $this->getEntityManager()->persist($entity);
        $this->getEntityManager()->flush();

        return $entity;
    }

    public function editarRifas($param = array()) {
        $entity = $this->getEntityManager()->getReference('Rifas\Entity\RifaEntity', $param['idRifa']);
        (new Hydrator\ClassMethods())->hydrate($param, $entity);

        $this->getEntityManager()->persist($entity);
        $this->getEntityManager()->flush();

        return $entity;
    }

    public function selecionarRifas($id) {
        $repository = $this->find($id);
        return $repository;
    }

    public function selecionarRifasBy($param) {
        $repository = $this->findBy($param);
        return $repository;
    }

    public function listarRifasPaginado($param = array(), $pagina = 1, $itens = 10) {
        $queryCreate = $this->criarConsultaRifas($param);

        $paginado = new ORMPaginator($queryCreate->getQuery());
        $paginado->setUseOutputWalkers(FALSE);

        $adapter = new DoctrineAdapter($paginado);

        $paginator = new Paginator($adapter);
        $paginator->setDefaultItemCountPerPage($itens);
        $paginator->setCurrentPageNumber($pagina);

        return $paginator;
    }

    public function listarRifas($param = array()) {
        $queryCreate = $this->criarConsultaRifas($param);
        $listaRifas = $queryCreate->getQuery()->getResult();
        return $listaRifas;
    }

    private function criarConsultaRifas($param = array()) {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select(array('a.idRifa', 'a.dsInstituicao', 'a.dsPremio', 'a.dtSorteio', 'a.vlRifa', 'b.idUsuario'))
                ->from('Rifas\Entity\RifaEntity', 'a')
                ->innerJoin('a.idUsuario', 'b');
        if ($param['idUsuarioPsq'] != "") {
            $query->andWhere("b.idUsuario = :idUsuarioPsq")
                    ->setParameter('idUsuarioPsq', $param['idUsuarioPsq']);
        }
        if (!empty($param['dsInstituicaoPsq'])) {
            $query->andWhere("a.dsInstituicao LIKE :dsInstituicaoPsq")
                    ->setParameter('dsInstituicaoPsq', "%{$param['dsInstituicaoPsq']}%");
        }
        if (!empty($param['dsPremioPsq'])) {
            $query->andWhere("a.dsPremio LIKE :dsPremioPsq")
                    ->setParameter('dsPremioPsq', "%{$param['dsPremioPsq']}%");
        }
        if (!empty($param['dtInicioPsq'])) {
            $query->andWhere('a.dtSorteio >= :dtInicioPsq')
            ->setParameter('dtInicioPsq', \DateTime::createFromFormat('d/m/Y', $param['dtInicioPsq']));
        }
        if (!empty($param['dtFinalPsq'])) {
            $query->andWhere('a.dtSorteio <= :dtFimPsq')
            ->setParameter('dtFinalPsq', \DateTime::createFromFormat('d/m/Y', $param['dtFinalPsq']));
        }
        $query->addOrderBy('a.idRifa', 'DESC');

//        echo '<pre>';
//        print_r($query->getQuery()->getSQL());
//        echo '<pre/>';
//        die;

        return $query;
    }

    public function excluirRifas($repository) {
        $this->getEntityManager()->remove($repository);
        $this->getEntityManager()->flush();
        return $repository;
    }

}
