<?php

namespace Usuario\Entity\Repository;

use Usuario\Entity\UsuarioEntity;
use Doctrine\ORM\EntityRepository;
use DoctrineORMModule\Paginator\Adapter\DoctrinePaginator as DoctrineAdapter;
use Doctrine\ORM\Tools\Pagination\Paginator as ORMPaginator;
use Zend\Paginator\Paginator;
use Zend\Stdlib\Hydrator;

/**
 * UsuarioRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UsuarioRepository extends EntityRepository
{
    public function findByLoginAndPassword(UsuarioEntity $usuario, $login, $password) {
        /**
         * @var $userLogin \Usuario\Entity\UsuarioEntity
         */
        $userLogin = $this->createQueryBuilder('u')
            ->where('u.login = :a1')
            ->setParameter('a1', $login)->getQuery()->getOneOrNullResult();

        if (!is_null($userLogin)) {
            if ($usuario->encryptPassword($password) == $userLogin->getSenha()) {
                return $userLogin;
            }
        }
        return false;
    }
    
    public function verificarLoginExistente($login, $idUsuario = null) {
        $user = $this->createQueryBuilder('u')
            ->where('u.login LIKE :login')
            ->setParameter('login', $login)->getQuery()->getOneOrNullResult();

        if (!is_null($user)) {
            if ($idUsuario != $user->getIdUsuario()) {
                return $user;
            }
        }
        return false;
    }
    
    public function inserirUsuario($param = array()) {
        $entity = new UsuarioEntity($param);
        
        $this->getEntityManager()->persist($entity);
        $this->getEntityManager()->flush();

        return $entity;
    }
    
    public function editarUsuario($param = array()) {
        $entity = $this->getEntityManager()->getReference('Usuario\Entity\UsuarioEntity', $param['idUsuario']);
        (new Hydrator\ClassMethods())->hydrate($param, $entity);
        
        $this->getEntityManager()->persist($entity);
        $this->getEntityManager()->flush();

        return $entity;
    }
    
    public function excluirUsuario($repository) {
        $this->getEntityManager()->remove($repository);
        $this->getEntityManager()->flush();
        return $repository;
    }
    
    public function selecionarUsuario($id) {
        $repository = $this->find($id);
        return $repository;
    }
    
    public function selecionarUsuarioBy($param) {
        $repository = $this->findBy($param);
        return $repository;
    }
    
    public function listarUsuariosPaginados($param = array(), $pagina = 1, $itens = 10) {
        $queryCreate = $this->criarConsultaUsuarios($param);
        $paginado = new ORMPaginator($queryCreate->getQuery());
        $paginado->setUseOutputWalkers(FALSE);
        $adapter = new DoctrineAdapter($paginado);
        
        $paginator = new Paginator($adapter);
        $paginator->setDefaultItemCountPerPage($itens);
        $paginator->setCurrentPageNumber($pagina);
        return $paginator;
    }
    
    public function listarUsuarios($param = array()) {
        $queryCreate = $this->criarConsultaUsuarios($param);
        $listaUsuarios = $queryCreate->getQuery()->getResult();
        return $listaUsuarios;
    }

    private function criarConsultaUsuarios($param = array()) {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select(array(
            'a.idUsuario', 'a.login', 'a.noUsuario',
            'a.email', 'a.tpUsuario', 'a.stUsuario'))
            ->from('Usuario\Entity\UsuarioEntity', 'a');
        if (!empty($param['loginPsq'])) {
            $query->andWhere("a.login LIKE :login")
                    ->setParameter('login', "{$param['loginPsq']}%");
        }
        if (!empty($param['emailPsq'])) {
            $query->andWhere("a.email LIKE :email")
                    ->setParameter('email', "{$param['emailPsq']}%");
        }
        if ($param['tpUsuarioPsq'] != "T") {
            $query->andWhere("a.tpUsuario = :tpUsuario")
                    ->setParameter('tpUsuario', $param['tpUsuarioPsq']);
        }
        if ($param['stUsuarioPsq'] != "T") {
            $query->andWhere("a.stUsuario = :stUsuario")
                    ->setParameter('stUsuario', $param['stUsuarioPsq']);
        }
        $query->addOrderBy('a.idUsuario', 'DESC');
        
        return $query;
    }

}
